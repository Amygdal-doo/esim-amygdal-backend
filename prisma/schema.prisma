generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum LoginType {
  GOOGLE
  APPLE
  MICROSOFT
  CREDENTIALS
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

model RefreshToken {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @unique @db.Uuid
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "user_Id_Index")
}

model User {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  firstName    String        @db.VarChar(256)
  lastName     String        @db.VarChar(256)
  username     String        @unique(map: "user_username_unique") @db.VarChar(256)
  email        String        @unique(map: "user_email_unique") @db.VarChar(256)
  role         Role           @default(USER)
  loginType    LoginType      @default(CREDENTIALS)
  googleId     String?       @unique(map: "user_googleId_unique") @db.VarChar(100)
  appleId      String?       @unique(map: "user_appleId_unique") @db.VarChar(100)
  microsoftId  String?       @unique(map: "user_microsoftId_unique") @db.VarChar(100)
  password     String?
  refreshToken RefreshToken?
  airaloApiToken AiraloToken?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@index([email], map: "email_Index")
  @@index([id], map: "id_Index")
  @@index([username], map: "username_Index")
}

model AiraloToken {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @unique @db.Uuid
  token     String
  expiresIn Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "user_Id_airaloToken_Index")
}


