generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum LoginType {
  GOOGLE
  APPLE
  MICROSOFT
  CREDENTIALS
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

model RefreshToken {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @unique @db.Uuid
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "user_Id_Index")
}

model User {
  id             String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  firstName      String        @db.VarChar(256)
  lastName       String        @db.VarChar(256)
  username       String        @unique(map: "user_username_unique") @db.VarChar(256)
  email          String        @unique(map: "user_email_unique") @db.VarChar(256)
    isEmailConfirmed       Boolean                 @default(false)
  role           Role          @default(USER)
  loginType      LoginType     @default(CREDENTIALS)
  googleId       String?       @unique(map: "user_googleId_unique") @db.VarChar(100)
  appleId        String?       @unique(map: "user_appleId_unique") @db.VarChar(100)
  microsoftId    String?       @unique(map: "user_microsoftId_unique") @db.VarChar(100)
  password       String?
  refreshToken   RefreshToken?
    resetPasswordToken     ResetPasswordToken?
  airaloApiToken AiraloToken?
  order          Order[]
  esim           Esim[]
  profile        Profile?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@index([email], map: "email_Index")
  @@index([id], map: "id_Index")
  @@index([username], map: "username_Index")
}

model Profile {
  id          String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  newsletter  Boolean @default(false)
  location    String? 
  phoneNumber String?  @db.VarChar(50)
  userId    String   @unique @db.Uuid

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  // language String
  // currency String
    @@index([userId], map: "user_Id_profile_Index")
}

model AiraloToken {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @unique @db.Uuid
  token     String
  expiresIn Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "user_Id_airaloToken_Index")
}

model Order {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId         String   @db.Uuid
  orderId        Int
  code           String
  orderCreatedAt String
  quantity       String
  packageId      String
  esim           Esim[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Esim {
  id        String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String @db.Uuid
  orderId   String @db.Uuid
  qrcode    String
  qrcodeUrl String
  esimId    Int    @unique
  iccid     String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Image {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  src       String // URL of the image
  altText   String? // Alternative text for the image
  width     Int
  height    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  countries Country?
}

model Country {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  slug         String
  title        String
  code         String?   @unique
  // capital      String
  region       String?
  currency     Currency? @relation(fields: [currencyId], references: [id])
  currencyId   String?   @db.Uuid
  language     Language? @relation(fields: [languageId], references: [id])
  languageId   String?   @db.Uuid
  imageId      String?   @unique @db.Uuid
  image        Image?    @relation(fields: [imageId], references: [id])
  // flag         String?
  diallingCode String?
  // isoCode      String

  @@index(fields: [slug])
  @@index(fields: [title])
  @@index(fields: [code])
  @@index(fields: [region])
}

model Currency {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  code      String    @unique
  name      String
  symbol    String?
  countries Country[]
  // shippingMethods ShippingMethod[]

  @@index(fields: [code])
  @@index(fields: [name])
}

model Language {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  code      String?   @unique
  // iso639_2   String?
  name      String
  // nativeName String?
  countries Country[]

  @@index(fields: [name])
}

model ResetPasswordToken {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tokenHash String   @unique
  expiresAt DateTime
  userId    String     @unique @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("ResetPasswordToken")
}